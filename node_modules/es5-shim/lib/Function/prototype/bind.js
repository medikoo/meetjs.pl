'use strict';

var slice  = Array.prototype.slice
  , create = Object.create
  , cache, getBody

if (!Function.prototype.bind) {

	cache = [];

	getBody = (function (genArgs, body) {
		return function (length) {
			return cache[length] || (cache[length] = Function('target', 'that',
				'args', 'slice', 'return function bound (' + genArgs(length) + ') {' +
				body + '};'));
		};
	}(function (length) {
		var args = [];
		while (length--) {
			args.push('a' + length.toString(32));
		}
		return args.join(', ');
	}, function () {
		if (this instanceof bound) {
			var self = create(target.prototype);
			var result = target.apply(self, args.concat(slice.call(arguments)));

			if (result && (Object(result) === result)) {
				return result;
			}
			return self;

		} else {
			return target.apply(that, args.concat(slice.call(arguments)));
		}
	}.toString().slice('function () {'.length, -1)));

	Function.prototype.bind = function bind (that) {
		if (!this || typeof this.apply != "function" ||
			 typeof this.call != "function") {
			return new TypeError();
		}
		return getBody(this.length)(this, that, slice.call(arguments, 1), slice);
	};
}
