'use strict';

var isArray          = Array.isArray
  , create           = Object.create
  , defineProperty   = Object.defineProperty
  , defineProperties = Object.defineProperties
  , compact          = require('es5-ext/lib/Array/compact').call
  , invoke           = require('es5-ext/lib/Function/invoke')
  , isFunction       = require('es5-ext/lib/Function/is-function')
  , forEach          = require('es5-ext/lib/List/for-each/call')
  , slice            = require('es5-ext/lib/List/slice/call')
  , toArray          = require('es5-ext/lib/List/to-array').call
  , someValue        = require('es5-ext/lib/List/some-value').call
  , extend           = require('es5-ext/lib/Object/extend').call
  , getPropertyNames = require('es5-ext/lib/Object/get-property-names').call
  , c                = require('es5-ext/lib/Object/descriptors/c')
  , ce               = require('es5-ext/lib/Object/descriptors/ce')
  , e                = require('es5-ext/lib/Object/descriptors/e')
  , v                = require('es5-ext/lib/Object/descriptors/v')
  , oForEach         = require('es5-ext/lib/Object/plain/for-each').call
  , isPlainObject    = require('es5-ext/lib/Object/plain/is-plain-object').call
  , setTrue          = require('es5-ext/lib/Object/plain/set-value').curry(true)
  , oToArray         = require('es5-ext/lib/Object/plain/to-array')(true).call
  , isRegExp         = require('es5-ext/lib/RegExp/is-reg-exp')
  , isString         = require('es5-ext/lib/String/is-string')
  , ee               = require('event-emitter')
  , isDF             = require('dom-ext/lib/core/DocumentFragment/is-document-fragment')
  , isNode           = require('dom-ext/lib/core/Node/is-node')
  , ptrim            = require('next/lib/path/trim')
  , tree             = require('tree/lib/core')
  , findPath         = require('tree/lib/ext/find-path')
  , replaceContent   = require('tree/lib/ext/Node/replace-content').call

  , node, document, imp, reserved, resolveTpl, resetForms;

resolveTpl = function (tpl, engine, scope) {
	if (isFunction(tpl)) {
		return toArray(engine.build(tpl.bind(scope)).childNodes);
	} else if (isString(tpl)) {
		return toArray(engine.build(tpl).childNodes);
	} else if (isDF(tpl)) {
		return toArray(tpl.childNodes);
	} else if (isNode(tpl)) {
		return [tpl];
	} else {
		throw new Error('Template type not supported');
	}
};

node = create(tree.node(), {
	map: v(null),
	resolved: v(false),
	diff: e(function (name, resolver) {
		if (isRegExp(name)) {
			return this.setDynamic(name, resolver, slice(arguments, 2));
		} else if (reserved[name]) {
			throw new Error("View cannot be named '" + name + "'");
		}
		this[name] = this.appendChild(
			this.ownerDocument.createNode(slice(arguments, 1)));
		this[name]._name = name;
		return this[name];
	}),
	load: e(function () {
		this.ownerDocument.load(this);
	}),
	destroy: e(function () {
		this.ownerDocument.destroy(this);
	}),
	setDynamic: v(function (re, resolver, map) {
		var dynamic = [];
		this.dynamic.push(dynamic);
		dynamic.re = re;
		dynamic.resolver = resolver;
		dynamic.map = map;
		return dynamic;
	}),
	tryDynamic: v(function (name, dynamic) {
		var match, scope, view, map;
		if (!(match = name.match(dynamic.re))) {
			return null;
		}
		scope = dynamic.resolver.apply(this, slice(match, 1));
		if (!scope) {
			return null;
		}
		console.log("INIT", scope, dynamic.map);
		if (isArray(scope) && !dynamic.map.length) {
			map = scope[1];
			scope = scope[0];
		} else {
			map = dynamic.map;
		}
		console.log("AFT", scope, map);
		view = this[name] =
			this.appendChild(this.ownerDocument.createNode(map));
		dynamic.forEach(function (args) {
			view.diff.apply(view, args).scope = scope;
		}, this);
		view.scope = scope;
		return view;
	}),
	resolve: e(function (path) {
		var view = this;
		if (path[0] === '/') {
			view = this.ownerDocument.documentElement;
			if (view['/']) {
				view = view['/'];
			}
			path = path.slice(1);
		}
		compact(ptrim(path).split('/')).every(function (name) {
			if (name === '..') {
				return view = view.parentNode;
			} else if (name !== '.') {
				return view = view[name] ||
					someValue(view.dynamic, this.tryDynamic.bind(view, name));
			} else {
				return true;
			}
		}, this);
		return view || null;
	}),
	resolveMap: v(function () {
		var i, l, map, rmap, el, tl, tpl, item, engine;
		if (!this.resolved) {
			map = this.map; i = 0; l = map.length; rmap = [];
			engine = this.ownerDocument.engine;
			if (l === 1) {
				map = oToArray(engine.require(map[0]));
				l = map.length;
			}
			do {
				if (l) {
					rmap.push(item = {});
					el = item.el = map[i++];
					if (typeof item.el !== "object") {
						el = engine.getById(item.el);
						if (!el) {
							throw new Error("Could not find element with id '" + item.el + "'");
						}
						item.el = el;
					}
					tpl = map[i++];
					if (isPlainObject(tpl)) {
						item.to = tpl;
						item.from = {};
						oForEach(tpl, function (value, name) {
							if (!name) {
								item.to[''] = resolveTpl(value, engine, this.scope);
								item.from[''] = toArray(el.childNodes);
							} else if (typeof value === 'string') {
								item.from[name] =
									el.hasAttribute(name) ? el.getAttribute(name) : null;
							} else if (name === 'class') {
								tl = item.from['class'] = {};
								oForEach(value, function (value, name) {
									tl[name] = el.classList.contains(name);
								});
							} else {
								throw new Error('Template type not supported');
							}
						}, this);
					} else {
						item.to = resolveTpl(tpl, engine, this.scope);
						item.from = toArray(el.childNodes);
					}
				}
			} while (i < l);
			defineProperties(this, {
				map: v(rmap),
				resolved: v(true)
			});
		}
		return this;
	})
});

getPropertyNames(node).forEach(setTrue, reserved = {});

resetForms = function (els) {
	els.forEach(function (el) {
		if (el.nodeName.toLowerCase() === 'form') {
			el.reset();
		} else if (el.querySelectorAll) {
			forEach(el.querySelectorAll('form'), function (form) {
				form.reset();
			});
		}
	});
};

document = ee(extend(tree.document(node), {
	current: e(null),
	createNode: e(function (_super, map) {
		return defineProperties(_super(this), {
			map: c(map),
			dynamic: v([])
		});
	}),
	load: e(function (view) {
		var path = findPath(this.current, view);
		// console.log("LOAD", this.current._name, '>', view._name, '|',
		// 	path.map(function (v) { return v._name; }).join(' > '));
		if (path.length) {
			path.forEach(this['switch'], this);
			this.emit('load', view);
		}
	}),
	destroy: e(function (view) {
		var current;
		if ((current = (this.current === view))) {
			this.load(view.parentNode);
		}
		view.parentNode.removeChild(view);
		this.emit('destroy', view, current);
	}),
	'switch': v(function (to) {
		var dir = to.parentNode === this.current, val;
		(dir ? to.resolveMap() : this.current).map.forEach(function (map) {
			val = map[dir ? 'to' : 'from'];
			if (isArray(val)) {
				replaceContent(map.el, val);
				resetForms(val);
			} else {
				oForEach(val, function (value, name) {
					if (!name) {
						replaceContent(map.el, value);
						resetForms(value);
					} else if (typeof value === 'string') {
						map.el.setAttribute(name, value);
					} else if (value === null) {
						map.el.removeAttribute(name);
					} else if (name === 'class') {
						oForEach(value, function (value, name) {
							map.el.classList[value ? 'add' : 'remove'](name);
						});
					} else {
						console.log(name, value);
						throw new Error('Unrecognized tpl setting');
					}
				});
			}
		});
		defineProperty(this, 'current', ce(to));
	})
}), true);

imp = extend(tree.implementation(document), {
	createDocument: e(function (_super, engine, container, content) {
		if (typeof container === 'string') {
			container = engine.getById(container);
		}
		var doc = _super(this, [container, content || container.childNodes]);
		defineProperties(doc, {
			current: ce(content ? doc : doc.documentElement),
			engine: e(engine),
			document: e(container.ownerDocument)
		});
		doc.documentElement.load();
		return doc;
	})
});

module.exports = function (engine, container, content) {
	return imp.createDocument(engine, container, content).documentElement;
};
