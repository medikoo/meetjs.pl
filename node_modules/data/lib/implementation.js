'use strict';

var now              = Date.now
  , create           = Object.create
  , defineProperty   = Object.defineProperty
  , defineProperties = Object.defineProperties
  , parse            = JSON.parse
  , isArray          = Array.isArray
  , extend           = require('es5-ext/lib/Object/extend').call
  , c                = require('es5-ext/lib/Object/descriptors/c')
  , e                = require('es5-ext/lib/Object/descriptors/e')
  , v                = require('es5-ext/lib/Object/descriptors/v')
  , oForEach         = require('es5-ext/lib/Object/plain/for-each').call
  , oMap             = require('es5-ext/lib/Object/plain/map').call
  , pad              = require('es5-ext/lib/Number/pad').call(2).call
  , isString         = require('es5-ext/lib/String/is-string')
  , ee               = require('event-emitter')

  , nsp              = require('./namespace')
  , processSchema    = require('./schema')
  , datap            = require('./data')

  , updateObject, generateId, o, generated = {}, serializeWaste
  , nsIdRe = /^[a-z][a-z0-9-]*$/;

serializeWaste = v(function () {
	return [this._id, this._ns.id, +this._created, +this._updated,  '亡']
		.join('.');
});

updateObject = function (o, old, emitter) {
	this.emit(emitter, 'update', o, old, emitter);
	if (o._destroyed) {
		delete this[o._id];
		this.waste[o._id] = o;
		this.emit(emitter, 'remove', o, old, emitter);
	} else if (!old) {
		this[o._id] = o;
		delete this.waste[o._id];
		this.emit(emitter, 'add', o, emitter);
	}
};
generateId = function (start) {
	var id = now() - start;
	while (generated.hasOwnProperty(id)) ++id;
	generated[id] = true;
	return id + this;
};

o = ee(defineProperties({}, {
	create: e(function (id, schema, methods) {
		var ns, foreigns;
		if (this[id]) {
			throw new Error("Can't create namespace with that name");
		} else if (!id.match(nsIdRe)) {
			throw new Error("Invalid namespace id");
		}
		defineProperty(this, id, v(defineProperties(ns = create(nsp, {
			id: v(id),
			schema: v(processSchema(schema)),
			relations: v({}),
			foreigns: v(foreigns = {}),
			lists: v({ methods: [], lists: [] }),
			filters: c(null),
			implementation: v(this),
			length: c(0),
			waste: v({}),
			data: v(extend(datap, methods || {}))
		}), {
			onObjectDestroy: v(ns.onObjectDestroy.bind(ns)),
			onObjectUpdate: v(ns.onObjectUpdate.bind(ns))
		})));
		defineProperty(ns.schema, '_ns', v(ns));
		ns.on('update', this.updateObject);

		oForEach(schema, function (data, name) {
			if (typeof data.type === 'object') {
				foreigns[name] = data.type;
				data.type.createRelation(this, name);
			}
		}, ns);
		return ns;
	}),
	unserialize: e(function (parse) {
		return function self (str, emitter) {
			var data, obj;
			if (isArray(str)) {
				return str.map(function (str) {
					return this.unserialize(str, emitter);
				}, this);
			}
			data = parse(str);
			if (!this[data[1]]) {
				throw new Error("Could not find namespace for given id");
			}
			if (!data[4]) {
				if ((obj = this[data[0]])) {
					if (obj._updated.valueOf() < data[3]) {
						obj._destroy(emitter);
					}
				} else if (!(obj = this.waste[data[0]])) {
					obj = this.waste[data[0]] = this[data[1]].waste[data[0]] =
						defineProperties({}, {
							_id: v(data[0]),
							_ns: v(this[data[1]]),
							_destroyed: v(true),
							_created: v(data[2]),
							_updated: v(data[3]),
							_serialize: serializeWaste
						});
				}
				return obj;
			}
			return this[data[1]].restore(data[0], data[2], data[3], data[4], emitter);
		};
	}(function (re, parse) {
		return function (str) {
			var match;
			if (!(match = str.match(re))) {
				throw new Error('Could not parse data');
			}
			return [match[1], match[2], new Date(Number(match[3])),
				new Date(Number(match[4])), (match[5] === '亡') ? null : parse(match[5])];
		};
	}(/^(\d+)\.([a-z][a-z0-9-]*)\.(\d+)\.(\d+)\.(.*)$/, function (map) {
		return function (data) {
			return oMap(parse(data), map);
		};
	}(function (re) {
		return function (value) {
			return (isString(value) && value.match(re)) ? new Date(Date.parse(value))
				: value;
		};
	}(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d{3})?Z$/)))))
}));

module.exports = function (idDate) {
	var imp = create(o, {
		generateId: v(generateId.bind(pad(Math.round(Math.random()*100)),
			+(idDate || 0))),
		waste: v({})
	});
	return defineProperties(imp, {
		updateObject: v(updateObject.bind(imp))
	});
};
