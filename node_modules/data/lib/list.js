'use strict';

var create           = Object.create
  , defineProperties = Object.defineProperties
  , sort             = Array.prototype.sort
  , empty            = require('es5-ext/lib/Array/empty').call
  , remove           = require('es5-ext/lib/Array/remove').call
  , propSort         = require('es5-ext/lib/Object/compare-by')
  , isFunction       = require('es5-ext/lib/Function/is-function')
  , forEachRight     = require('es5-ext/lib/List/for-each-right')
  , c                = require('es5-ext/lib/Object/descriptors/c')
  , e                = require('es5-ext/lib/Object/descriptors/e')
  , v                = require('es5-ext/lib/Object/descriptors/v')
  , w                = require('es5-ext/lib/Object/descriptors/w')
  , merge            = require('es5-ext/lib/Object/plain/merge').call
  , values           = require('es5-ext/lib/Object/plain/values').call
  , eeMethods        = require('event-emitter').getMethods()
  , nextTick         = require('clock/lib/next-tick')

  , onObjectUpdate, getOnObjectUpdate, initAdd, o;

onObjectUpdate = function (changed, old, obj) {
	if (this.sortMethod(old, obj)) {
		this.scheduleSort();
	}
};

getOnObjectUpdate = function (method) {
	if ((method === '_id') || (method === '_created')) {
		return null;
	} else if (method === '_updated') {
		return this.scheduleSort.bind(this);
	} else {
		return onObjectUpdate.bind(this);
	}
};

initAdd = function (obj) {
	this.push(obj);
	if (this.onObjectUpdate) {
		obj._on('update', this.onObjectUpdate);
	}
};

o = merge({
	scheduled: w(true),
	add: c(function (obj) {
		this.push(obj);
		if (this.onObjectUpdate) {
			obj._on('update', this.onObjectUpdate);
		}
		this.scheduleSort();
	}),
	remove: v(function (obj) {
		remove(this, obj);
		this.scheduleSort();
	}),
	scheduleSort: v(function () {
		if (!this.scheduled) {
			nextTick(this.sort);
			this.scheduled = true;
		}
	}),
	sort: c(function () {
		if (this.scheduled) {
			sort.call(this, this.sortMethod);
			this.scheduled = false;
			this.emit('update', this);
		}
	}),
	sortMethod: c(null),
	destroy: v(function (emitter) {
		this.allOff();
		empty(this);
	})
}, eeMethods);

module.exports = function (data, sortMethod) {
	var l;
	defineProperties(l = defineProperties([], o), {
		sortMethod: v(isFunction(sortMethod) ? sortMethod : propSort(sortMethod).call),
		sort: v(l.sort.bind(l)),
		onObjectUpdate: v(getOnObjectUpdate.call(l, sortMethod)),
		add: v(l.add.bind(l)),
		forEachRight: v(forEachRight)
	});
	data.on('add', l.add);
	data.on('remove', l.remove.bind(l));
	data.on('destroy', l.destroy.bind(l));
	values(data).forEach(initAdd, l);
	l.sort();
	return l;
};
