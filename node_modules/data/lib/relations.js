'use strict';

var create   = Object.create
  , contains = require('es5-ext/lib/List/contains').call
  , c        = require('es5-ext/lib/Object/descriptors/c')
  , e        = require('es5-ext/lib/Object/descriptors/e')
  , v        = require('es5-ext/lib/Object/descriptors/v')

  , relation = require('./relation');

module.exports = create({}, {
	create: v(function (obj) {
		var rel = this[obj._id] = create(relation, {
			id: v(obj._id + '@' + this.to.id + ':' + this.name),
			from: v(obj),
			to: v(this.to),
			schema: v(this.to.schema),
			name: v(this.name),
			lists: v({ methods: [], lists: []}),
			relations: v({}),
			length: c(0)
		});
		obj._on('destroy', this.onFromDestroy);
		return rel;
	}),
	onToUpdate: v(function (changed, old, obj) {
		var id, name = this.name;
		if (contains(changed, name)) {
			if (old[name]) {
				this[old[name]._id].remove(obj, old);
			}
			if (obj[name]) {
				if (!this[id = obj[name]._id]) {
					this.create(obj[name]);
				}
				this[id].add(obj);
			}
		}
	}),
	onFromDestroy: v(function (old, obj) {
		if (this[obj._id]) {
			this[obj._id].destroy();
			delete this[obj._id];
		}
	}),
	onToDestroy: v(function (old, obj) {
		var name = this.name;
		if (old[name] && !old[name]._destroyed) {
			if (this[old[name]._id]) {
				this[old[name]._id].remove(obj, old);
			} else {
				console.warn("CANNOT FIND RELATION", old[name]._id, old[name], this);
			}
		}
	}),
	onadd: v(function (obj) {
		var id, name = this.name;
		if (obj[name]) {
			if (!this[id = obj[name]._id]) {
				this.create(obj[name]);
			}
			this[id].add(obj);
		}
		obj._on('update', this.onToUpdate);
		obj._on('destroy', this.onToDestroy);
	}),
	get: e(function (obj) {
		return this[obj._id] || this.create(obj);
	})
});
