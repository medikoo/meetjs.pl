'use strict';

var create           = Object.create
  , defineProperty   = Object.defineProperty
  , defineProperties = Object.defineProperties
  , keys             = Object.keys
  , invoke           = require('es5-ext/lib/Function/invoke')
  , copy             = require('es5-ext/lib/Object/plain/clone').call
  , empty            = require('es5-ext/lib/Object/plain/empty').call
  , oForEach         = require('es5-ext/lib/Object/plain/for-each').call
  , map2array        = require('es5-ext/lib/Object/map-to-array').call
  , merge            = require('es5-ext/lib/Object/plain/merge').call
  , setTrue          = require('es5-ext/lib/Object/plain/set-value').curry(true)
  , c                = require('es5-ext/lib/Object/descriptors/c')
  , e                = require('es5-ext/lib/Object/descriptors/e')
  , v                = require('es5-ext/lib/Object/descriptors/v')
  , ee               = require('event-emitter')

  , list             = require('./list')
  , filters          = require('./filters')

  , relation, trFilter;

module.exports = relation = ee(create({}, {
	create: v(function (id, ns, name) {
		var rel = this.relations[id] = create(relation, {
			id: v(this.id + '@' + ns.id + ':' + name),
			from: v(this),
			to: v(ns),
			schema: v(ns.schema),
			lists: v({ methods: [], lists: []}),
			name: v(name),
			length: c(0),
			relations: v({})
		});
		defineProperties(rel, {
			add: v(rel.add.bind(rel)),
			onadd: v(rel.onadd.bind(rel)),
			remove: v(rel.remove.bind(rel)),
			removeSet: v(rel.removeSet.bind(rel))
		});
		this.on('add', rel.onadd);
		this.on('remove', rel.onremove.bind(rel));
		this.on('destroy', rel.destroy.bind(rel));
		oForEach(this, rel.onadd);
		return rel;
	}),
	onadd: v(function (obj) {
		var rel = obj._get(this.to, this.name);
		oForEach(rel, this.add);
		rel.on('add', this.add);
		rel.on('remove', this.remove);
		rel.on('destroy', this.removeSet);
	}),
	onremove: v(function (obj, old) {
		var rel;
		if (!obj._destroyed) {
			rel = obj._get(this.to, this.name);
			oForEach(rel, this.remove);
			rel.off('add', this.add);
			rel.off('remove', this.remove);
			rel.off('destroy', this.removeSet);
		}
	}),
	removeSet: v(function (obj) {
		oForEach(obj, this.remove);
	}),
	get: e(function (ns, name) {
		var rel, o, id;
		name = this.to.getRelation(ns, name).name;
		id = ns.id + '.' + name;
		if ((o = this.relations[id])) {
			return o;
		}
		return this.create(id, ns, name);
	}),
	add: v(function (o) {
		if (!this[o._id]) {
			this[o._id] = o;
			defineProperty(this, 'length', c(this.length + 1));
			this.emit('add', o);
		}
	}),
	remove: v(function (o, old) {
		if (this[o._id]) {
			delete this[o._id];
			defineProperty(this, 'length', c(this.length - 1));
			this.emit('remove', o, old);
		}
	}),
	serialize: e(function () {
		return map2array(this, invoke('_serialize'));
	}),
	list: e(function (sortMethod) {
		var index, l;
		if ((index = this.lists.methods.indexOf(sortMethod)) !== -1) {
			return this.lists.lists[index];
		}
		l = list(this, sortMethod);
		this.lists.methods.push(sortMethod);
		this.lists.lists.push(l);
		return l;
	}),
	filter: e(function (name, cond) {
		if (!this.filters) {
			defineProperty(this, 'filters', v(filters(this, this.to)));
		}
		return this.filters.filter(name, cond);
	}),
	destroy: v(function () {
		var old = copy(this);
		empty(this);
		defineProperty(this, 'length', v(0));
		this.emit('destroy', old, this);
	})
}), true);
