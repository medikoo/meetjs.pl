'use strict';

var create           = Object.create
  , defineProperty   = Object.defineProperty
  , defineProperties = Object.defineProperties
  , keys             = Object.keys
  , stringify        = JSON.stringify
  , noop             = require('es5-ext/lib/Function/noop')
  , aritize          = require('es5-ext/lib/Function/aritize').call
  , isObject         = require('es5-ext/lib/Object/is-object')
  , c                = require('es5-ext/lib/Object/descriptors/c')
  , ce               = require('es5-ext/lib/Object/descriptors/ce')
  , cev              = aritize(ce, 1)
  , e                = require('es5-ext/lib/Object/descriptors/e')
  , v                = require('es5-ext/lib/Object/descriptors/v')
  , copy             = require('es5-ext/lib/Object/plain/clone').call
  , empty            = require('es5-ext/lib/Object/plain/empty').call
  , diff             = require('es5-ext/lib/Object/plain/diff').call
  , isEmpty          = require('es5-ext/lib/Object/plain/is-empty').call
  , oForEach         = require('es5-ext/lib/Object/plain/for-each').call
  , oMap             = require('es5-ext/lib/Object/plain/map').call
  , keysMap          = require('es5-ext/lib/Object/plain/keys-map').call
  , flatten          = require('es5-ext/lib/List/flatten').call
  , prefix           = require('es5-ext/lib/String/prefix')('_').call
  , eeMethods        = keysMap(require('event-emitter').getMethods(), prefix)
  , list             = require('./list')

  , dstrCall, setProperty;

dstrCall = v(function () {
	throw new Error("Object was destroyed");
});

setProperty = function (changed, value, name) {
	if (isObject(this[name]) && isObject(value)) {
		if (this[name].valueOf() === value.valueOf()) {
			return;
		}
	} else if (this[name] === value) {
		return;
	}
	changed.push(name);
	defineProperty(this, name, ce(value));
};

module.exports =  defineProperties(defineProperties({}, {
	_get: e(function (ns, name) {
		return this._ns.getRelation(ns, name).get(this);
	}),
	_set: e(function (name, value, emitter) {
		var changed = [], old = copy(this), tmp;
		if (typeof name === 'object') {
			emitter = value;
			this._ns.validate(name, false, this);
			oForEach(name, setProperty.bind(this, changed));
		} else {
			tmp = {}; tmp[name] = value;
			this._ns.validate(tmp, false, this);
			setProperty.call(this, changed, value, name);
		}
		return changed.length ? defineProperty(this, '_updated',
			c(new Date))._emit(emitter, 'update', changed, old, this, emitter): this;
	}),
	_del: e(function (name, emitter) {
		var old, schema;
		if (!this.hasOwnProperty(name)) {
			return this;
		}
		schema = this._ns.schema[name];
		if (schema && schema.required) {
			throw new Error("Cannot remove required property");
		}
		old = copy(this);
		delete this[name];
		defineProperty(this, '_updated', c(new Date));
		return this._emit(emitter, 'update', [name], old, this, emitter);
	}),
	_reset: e(function (data, emitter, updated) {
		var old = this, changed;
		if (updated && (updated < this._updated)) {
			throw new Error("Cannot update data with older updated date");
		}
		changed = flatten(diff(this, data));
		if (changed.length) {
			if (!updated) {
				this._ns.validate(data, true, this);
			} else {
				this._ns.normalize(data, true, this);
			}
			old = copy(this);
			empty(this);
			defineProperties(this, oMap(data, cev));
			if (!updated) {
				updated = new Date;
			}
		}
		return updated ? defineProperty(this, '_updated', c(updated))
			._emit(emitter, 'update', changed, old, this, emitter) : this;
	}),
	_copy: e(function (resolve) {
		return function () {
			var data = copy(this);
			keys(this._ns.foreigns).forEach(resolve, data);
			return data;
		};
	}(function (key) {
		this[key] = this[key] && this[key]._id;
	})),
	_serialize: e(function () {
		return [this._id, this._ns.id, +this._created, +this._updated].concat(
			this._destroyed ? 'äº¡' :stringify(this._copy())).join('.');
	}),
	_destroy: e(function (emitter) {
		var old = copy(this);
		empty(this);
		defineProperties(this, {
			_get: dstrCall, _set: dstrCall, _del: dstrCall, _reset: dstrCall,
			_destroy: dstrCall, _on: dstrCall,
			_updated: v(new Date()), _destroyed: v(true)
		})._emit(emitter, 'destroy', old, this, emitter);
		this._allOff();
	})
}), eeMethods);
