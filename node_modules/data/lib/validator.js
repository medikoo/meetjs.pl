'use strict';

var isBoolean = require('es5-ext/lib/Boolean/is-boolean')
  , isDate    = require('es5-ext/lib/Date/is-date')
  , isNumber  = require('es5-ext/lib/Number/is-number')
  , oSome     = require('es5-ext/lib/Object/plain/some').call
  , isString  = require('es5-ext/lib/String/is-string')

  , _         = require('es5-ext/lib/Function/i')

  , emailRe = /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])$/
	  , telRe = /^[^\n]+$/

  , validators, strVal, selVal, requiredCheck, wrongValueText;

wrongValueText = _("Wrong value for");
requiredCheck = function (meta) {
	return meta.required ? "\"" + (meta.label || meta.name) + "\" " +
		_("is mandatory"): null;
};

module.exports = validators = {
	bool: function (meta, value) {
		if (value == null) {
			return requiredCheck(meta);
		}
		return isBoolean(value) ? null : wrongValueText + " \"" + meta.label + "\"";
	},
	checkbox: function (meta, value) {
		if (value == null) {
			return requiredCheck(meta);
		}
		return isBoolean(value) ? null : wrongValueText + " \"" + meta.label + "\"";
	},
	date: function (meta, value) {
		var date;
		if (value == null) {
			return requiredCheck(meta);
		}
		if (!isDate(value)) {
			return wrongValueText + " \"" + meta.label + "\"";
		}
		if (meta.min != null) {
			if (isNumber(meta.min)) {
				date = new Date();
				date.setDate(date.getDate() + meta.min);
				if (value < date) {
					return wrongValueText + " \"" + meta.label + "\"";
				}
			} else if (value < meta.min) {
				return wrongValueText + " \"" + meta.label + "\"";
			}
		}
		if (meta.max != null) {
			if (isNumber(meta.max)) {
				date = new Date();
				date.setDate(date.getDate() + meta.max);
				if (value > date) {
					return wrongValueText + " \"" + meta.label + "\"";
				}
			} else if (value > meta.max) {
				return wrongValueText + " \"" + meta.label + "\"";
			}
		}
		return null;
	},
	datetime: function (meta, value) {
		var date;
		if (value == null) {
			return requiredCheck(meta);
		}
		if (!isDate(value)) {
			return wrongValueText + " \"" + meta.label + "\"";
		}
		if (meta.min != null) {
			if (isNumber(meta.min)) {
				date = new Date();
				date.setMinutes(date.getMinutes() + meta.min);
				if (value < date) {
					return wrongValueText + " \"" + meta.label + "\"";
				}
			} else if (value < meta.min) {
				return wrongValueText + " \"" + meta.label + "\"";
			}
		}
		if (meta.max != null) {
			if (isNumber(meta.max)) {
				date = new Date();
				date.setMinutes(date.getMinutes() + meta.max);
				if (value > date) {
					return wrongValueText + " \"" + meta.label + "\"";
				}
			} else if (value > meta.max) {
				return wrongValueText + " \"" + meta.label + "\"";
			}
		}
		return null;
	},
	number: function (meta, value) {
		if (value == null) {
			return requiredCheck(meta);
		}
		if (!isNumber(value)) {
			value = Number(value);
		}
		return (isNaN(value) || (isNumber(meta.min) && (value < meta.min)) ||
			(isNumber(meta.max) && (value > meta.max))) ?
			wrongValueText + " \"" + meta.label + "\"" : null;
	},
	text: strVal = function (meta, value, data) {
		if (value == null) {
			return requiredCheck(meta);
		}
		if (!isString(value)) {
			if (isNumber(value)) {
				value = value.toString();
			} else {
				return wrongValueText + " \"" + meta.label + "\"";
			}
		}
		if (!value) {
			return requiredCheck(meta);
		}
		if (!value) {
			return null;
		}
		if (meta.pattern && !value.match(meta.pattern)) {
			return wrongValueText + " \"" + meta.label + "\"";
		}
		return null;
	},
	memo: strVal,
	password: strVal,
	email: function (meta, value) {
		meta.pattern = emailRe;
		return strVal.call(this, meta, value);
	},
	tel: function (meta, value) {
		if (!meta.pattern) {
			meta.pattern = telRe;
		}
		return strVal.call(this, meta, value);
	},
	select: selVal = function (meta, value) {
		if (value == null) {
			return requiredCheck(meta);
		}
		if (!meta.options[value]) {
			return wrongValueText + " \"" + meta.label + "\"";
		}
		return null;
	},
	subject: selVal,
	radio: selVal,
	_ns: function (meta, value) {
		if (value == null) {
			return requiredCheck(meta);
		}
		return value._ns === meta.type ? null : wrongValueText + " \"" +
			meta.label + "\"";
	},
	_unique: function (meta, value, data, current) {
		return oSome(this._ns, function (obj) {
			return (obj !== current) && (obj[meta.name] === value);
		}) ? meta.unique : null;
	},
	value: function (meta, value, data) {
		meta = this[meta.select].options[data[meta.select]];
		return validators[meta.type].call(this, meta, value, data);
	}
};
