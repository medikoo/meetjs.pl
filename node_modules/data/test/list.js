'use strict';

var clone    = require('es5-ext/lib/List/clone').call
  , copy     = require('es5-ext/lib/Object/plain/clone').call
  , propSort = require('es5-ext/lib/Object/compare-by')
  , cimp     = require('../lib/implementation')
  , dschema  = require('../lib/schema').setDynamic;

module.exports = function (t, a, d) {
	var imp, ns, o1, o2, o3, o4, l1, l2, tmp, tmp2
	  , x = {}, y = {}, z = {};

	imp = cimp();
	ns = imp.create('foo2', dschema({}));

	o1 = ns.create({ foo: 5 });
	o2 = ns.create({ foo: 3 });
	o3 = ns.create({ foo: 7 });

	l1 = ns.list(propSort('foo').call);
	a.deep(clone(l1), [o2, o1, o3], "Order");

	o2._set('foo', 8);
	a.deep(clone(l1), [o2, o1, o3], "Sort: scheduled");
	tmp = false;
	l1.once('update', function (obj) {
		a(obj, l1, "Listener: obj");
		a.deep(clone(l1), [o1, o3, o2], "Ordered");
		tmp = true;
	});

	setTimeout(function () {
		a(tmp, true, "Sorted in nextTick");
		l1.once('update', function (obj) {
			a.deep(clone(l1), [o4, o1, o3, o2], "Add: Ordered");

			l1.once('update', function (obj) {
				a.deep(clone(l1), [o4, o1, o2], "Remove: Ordered");

				l1.destroy();
				a.deep(clone(l1), [], "Destroy: Empty");
				d();
			});
			o3._destroy();
		});
		o4 = ns.create({ foo: 1 });
	}, 10);
};
