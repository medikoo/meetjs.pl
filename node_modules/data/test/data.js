'use strict';

var copy    = require('es5-ext/lib/Object/plain/clone').call
  , cimp    = require('../lib/implementation')
  , dschema = require('../lib/schema').setDynamic;

module.exports = function (t, a) {
	var imp, ns1, ns2, o1, o2, w = {}, x = {}, y = {}, z = {}, tmp, rel, updated, emitter;

	imp = cimp();

	ns1 = imp.create('foo', dschema({}));
	ns2 = imp.create('bar', dschema({ foo: { type: ns1 } }));

	o1 = ns1.create({ raz: x, dwa: y });

	o2 = ns2.create({ foo: o1, trzy: x });

	rel = o1._get(ns2);
	tmp = {}, tmp[o2._id] = o2;
	a.deep(copy(rel), tmp, "Get");

	tmp = false;
	o1._once('update', function (changed, old, obj) {
		a.deep(changed, ['raz'], "Update: changed");
		a.deep(old, { raz: x, dwa: y }, "Update: old");
		a(obj, o1, "Update: obj");
		tmp = true;
	});
	updated = o1._updated;
	a(o1._set('raz', z), o1, "Set: return");
	a(tmp, true, "Update: emitted");
	a.ok(o1._updated > updated, "Update: updated");
	a.deep(copy(o1), { raz: z, dwa: y }, "Updated: content");

	tmp = false;
	o1._once('update', function (changed, old, obj) {
		a.deep(changed, ['raz', 'dwa'], "Update with object: changed");
		a.deep(old, { raz: z, dwa: y }, "Update with object: old");
		tmp = true;
	});
	updated = o1._updated;
	o1._set({ raz: y, dwa: x });
	a(tmp, true, "Update wit objecte: Emitted");
	a.deep(copy(o1), { raz: y, dwa: x }, "Updated with object: content");
	a.not(o1._updated, updated, "Updated with object: updated");

	tmp = false;
	o1._once('update', function (changed, old, obj) {
		a.deep(changed, ['trzy'], "Update add: changed");
		a.deep(old, { raz: y, dwa: x }, "Update add: old");
		tmp = true;
	});
	updated = o1._updated;
	o1._set({ raz: y, dwa: x });
	a(updated, o1._updated, "Update without change: updated");
	a.deep(copy(o1), { raz: y, dwa: x }, "Updated without change content");
	a(tmp, false, "Update without change");

	// release listener
	o1._set('trzy', z);
	a(tmp, true, "Update add: Emitted");

	tmp = false;
	o1._once('update', function (changed, old, obj) {
		a.deep(changed, ['raz'], "Update delete: changed");
		a.deep(old, { raz: y, dwa: x, trzy: z }, "Update delete: old");
		tmp = true;
	});
	updated = o1._updated;
	a(o1._del('raz'), o1, "Delete: return");
	a(tmp, true, "Delete: Emitted");
	a(o1.hasOwnProperty('raz'), false, "Delete: content");
	a.deep(copy(o1), { dwa: x, trzy: z }, "Delete: content #2");
	a.not(o1._updated,  updated, "Delete: updated");

	tmp = false;
	o1._once('update', function (changed, old) {
		var test = ['foo', 'bar', 'trzy'];
		changed.sort(); test.sort();
		a.deep(changed, test, "Reset: changed");
		a.deep(old, { dwa: x, trzy: z }, "Reset: old");
		tmp = true;
	});
	updated = o1._updated;
	a(o1._reset({ foo: w, bar: y, dwa: x }), o1, "Reset: return");
	a(tmp, true, "Reset: Emitted");
	a.not(o1._updated, updated, "Reset: update");
	a.deep(copy(o1), { foo: w, bar: y, dwa: x }, "Reset: content");

	tmp = false;
	o1._once('update', function (changed, old) {
		a.deep(changed, [], "Reset date: changed");
		a.deep(old, { foo: w, bar: y, dwa: x }, "Reset date: changed");
		tmp = true;
	});
	o1._reset({ foo: w, bar: y, dwa: x }, null, updated = new Date);
	a(o1._updated, updated, "Reset date");

	// Set/Reset with same content (no update)
	tmp = false;
	o1._once('update', emitter = function () {
		tmp = true;
	});
	updated = o1._updated;
	o1._set('foo', w);
	a(updated, o1._updated, "No update: set");
	a(tmp, false, "No update: set: emitted");
	o1._set({ foo: w, dwa: x });
	a(updated, o1._updated, "No update: set: set");
	a(tmp, false, "No update: set: set: emitted");
	o1._reset({ foo: w, bar: y, dwa: x });
	a(updated, o1._updated, "No update: reset");
	a(tmp, false, "No update: reset: emitted");

	o1._set('trzy', 'whatever', emitter);
	a(tmp, false, "No update: emitter: set: emitted");
	o1._set({ trzy: 'other' }, emitter);
	a(tmp, false, "No update: emitter: set: set: emitted");
	o1._reset({ foo: w, bar: y, dwa: x }, emitter);
	a(tmp, false, "No update: emitter: reset: emitted");
	o1._del('foo', emitter);
	a(tmp, false, "No update: emitter: delete: emitted");

	o1._set('foo', w); // release listener

	tmp = false;
	o1._once('destroy', function (old, obj) {
		a.deep(old, { foo: w, bar: y, dwa: x }, "Destroy: diff");
		a(obj, o1, "Destroy: obj");
		tmp = true;
	});
	o1._destroy();
	a.deep(copy(o1), {}, "Destroy: Emptied data");
	a(tmp, true, "Destroy: emits");
	a.throws(function () {
		o1._get(ns2);
	}, "Destroy: _get throws");
	a.throws(function () {
		o1._set('foo', x);
	}, "Destroy: _set throws");
	a.throws(function () {
		o1._del('foo');
	}, "Destroy: _del throws");
	a.throws(function () {
		o1._reset({ foo: x });
	}, "Destroy: _reset throws");
	a.throws(function () {
		o1._on('whatever', function () {});
	}, "Destroy: _on throws");
	a.throws(function () {
		o1._destroy();
	}, "Destroy: _destroy throws");
};
