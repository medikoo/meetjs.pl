'use strict';

var clone    = require('es5-ext/lib/List/clone').call
  , copy     = require('es5-ext/lib/Object/plain/clone').call
  , propSort = require('es5-ext/lib/Object/compare-by')
  , cimp     = require('../lib/implementation')
  , dschema  = require('../lib/schema').setDynamic;

module.exports = function (t, a) {
	var imp, ns, o1, o2, o3, o4, o5, o6, f, now, tmp;

	now = new Date();

	return {
		General: function () {
			imp = cimp();
			ns = imp.create('foo', { bar: 'date' });

			o1 = ns.create({ bar: new Date(2011, 0, 1) });
			o2 = ns.create({ bar: new Date(2001, 0, 1) });
			o3 = ns.create({ bar: new Date(2013, 0, 1) });
			o4 = ns.create({ bar: new Date(2014, 0, 1) });
			o5 = ns.create({ bar: new Date(1998, 0, 1) });

			// General filter
			f = ns.filter(function (obj) {
				return obj.bar < now;
			});
			a.deep(ns.filters.filters[''], [f], "Filters factory content");
			tmp = {};
			tmp[o1._id] = o1; tmp[o2._id] = o2; tmp[o5._id] = o5;
			a.deep(copy(f), tmp, "Content");
			a(f.length, 3, "Length");

			tmp = false;
			f.once('add', function (obj) {
				tmp = obj;
			});
			o6 = ns.create({ bar: new Date(2009, 0, 1) });
			a(tmp, o6, "Add: Listener");
			tmp = {};
			tmp[o1._id] = o1; tmp[o2._id] = o2; tmp[o5._id] = o5;  tmp[o6._id] = o6;
			a.deep(copy(f), tmp, "Add: Content")
			a(f.length, 4, "Add: Length");

			tmp = false;
			f.once('remove', function (obj) {
				tmp = obj;
			});
			o2._destroy();
			a(tmp, o2, "Remove: Invoked");
			tmp = {};
			tmp[o1._id] = o1; tmp[o5._id] = o5;  tmp[o6._id] = o6;
			a.deep(copy(f), tmp, "Remove: Content");
			a(f.length, 3, "Remove: Length");

			tmp = false;
			f.once('remove', function (obj) {
				tmp = obj;
			});
			o5._set('bar', new Date(2020, 0, 1));
			a(tmp, o5, "Update: Remove: Invoked");
			tmp = {};
			tmp[o1._id] = o1; tmp[o6._id] = o6;
			a.deep(copy(f), tmp, "Update: Remove: Content");
			a(f.length, 2, "Update: Remove: Length");

			tmp = false;
			f.once('add', function (obj) {
				tmp = obj;
			});
			o5._set('bar', new Date(2010, 0, 1));
			a(tmp, o5, "Update: Add: Invoked");
			tmp = {};
			tmp[o1._id] = o1; tmp[o5._id] = o5; tmp[o6._id] = o6;
			a.deep(copy(f), tmp, "Update: Add: Content");
			a(f.length, 3, "Update: Add: Length");

			f.destroy()
			a.deep(ns.filters.filters[''], [], "Filters factory content after remove");
		},
		Property: function () {
			imp = cimp();
			ns = imp.create('foo', { bar: 'date' });

			o1 = ns.create({ bar: new Date(2011, 0, 1) });
			o2 = ns.create({ bar: new Date(2001, 0, 1) });
			o3 = ns.create({ bar: new Date(2013, 0, 1) });
			o4 = ns.create({ bar: new Date(2014, 0, 1) });
			o5 = ns.create({ bar: new Date(1998, 0, 1) });

			// General filter
			f = ns.filter('bar', function (date) {
				return date < now;
			});
			a.deep(ns.filters.filters.bar, [f], "Filters factory content");
			tmp = {};
			tmp[o1._id] = o1; tmp[o2._id] = o2; tmp[o5._id] = o5;
			a.deep(copy(f), tmp, "Content");

			tmp = false;
			f.once('add', function (obj) {
				tmp = obj;
			});
			o6 = ns.create({ bar: new Date(2009, 0, 1) });
			a(tmp, o6, "Add: Invoked");
			tmp = {};
			tmp[o1._id] = o1; tmp[o2._id] = o2; tmp[o5._id] = o5;  tmp[o6._id] = o6;
			a.deep(copy(f), tmp, "Add: Content");

			tmp = false;
			f.once('remove', function (obj) {
				tmp = obj;
			});
			o2._destroy();
			a(tmp, o2, "Remove: Invoked");
			tmp = {};
			tmp[o1._id] = o1; tmp[o5._id] = o5;  tmp[o6._id] = o6;
			a.deep(copy(f), tmp, "Remove: Content");

			tmp = false;
			f.once('remove', function (obj) {
				tmp = obj;
			});
			o6._set('bar', new Date(2020, 0, 1));
			a(tmp, o6, "Update: Remove: Invoked");
			tmp = {};
			tmp[o1._id] = o1; tmp[o5._id] = o5;
			a.deep(copy(f), tmp, "Update: Remove: Content");

			tmp = false;
			f.once('add', function (obj) {
				tmp = obj;
			});
			o6._set('bar', new Date(2010, 0, 1));
			a(tmp, o6, "Update: Add: Invoked");
			tmp = {};
			tmp[o1._id] = o1; tmp[o5._id] = o5; tmp[o6._id] = o6;
			a.deep(copy(f), tmp, "Update: Add: Content");

			f.destroy()
			a.deep(ns.filters.filters.bar, [], "Filters factory content after remove");
		},
		"Date index": {
			max: function () {
				imp = cimp();
				ns = imp.create('foo', { bar: { type: 'date', filtered: true } });

				o1 = ns.create({ bar: new Date(2011, 0, 1) });
				o2 = ns.create({ bar: new Date(2001, 0, 1) });
				o3 = ns.create({ bar: new Date(2013, 0, 1) });
				o4 = ns.create({ bar: new Date(2014, 0, 1) });
				o5 = ns.create({ bar: new Date(1998, 0, 1) });

				// General filter
				f = ns.filter('bar', {
					max: now
				});
				a.deep(ns.filters.filters.bar, [f], "Filters factory content");
				tmp = {};
				tmp[o1._id] = o1; tmp[o2._id] = o2; tmp[o5._id] = o5;
				a.deep(copy(f), tmp, "Content");
				a(f.length, 3, "Length");

				tmp = false;
				f.once('add', function (obj) {
					tmp = obj;
				});
				o6 = ns.create({ bar: new Date(2009, 0, 1) });
				a(tmp, o6, "Add: Invoked");
				tmp = {};
				tmp[o1._id] = o1; tmp[o2._id] = o2; tmp[o5._id] = o5;  tmp[o6._id] = o6;
				a.deep(copy(f), tmp, "Add: Content");
				a(f.length, 4, "Add: Length");

				tmp = false;
				f.once('remove', function (obj) {
					tmp = obj;
				});
				o2._destroy();
				a(tmp, o2, "Remove: Invoked");
				tmp = {};
				tmp[o1._id] = o1; tmp[o5._id] = o5;  tmp[o6._id] = o6;
				a.deep(copy(f), tmp, "Remove: Content");

				tmp = false;
				f.once('remove', function (obj) {
					tmp = obj;
				});
				o6._set('bar', new Date(2020, 0, 1));
				a(tmp, o6, "Update: Remove: Invoked");
				tmp = {};
				tmp[o1._id] = o1; tmp[o5._id] = o5;
				a.deep(copy(f), tmp, "Update: Remove: Content");

				tmp = false;
				f.once('add', function (obj) {
					tmp = obj;
				});
				o6._set('bar', new Date(2010, 0, 1));
				a(tmp, o6, "Update: Add: Invoked");
				tmp = {};
				tmp[o1._id] = o1; tmp[o5._id] = o5; tmp[o6._id] = o6;
				a.deep(copy(f), tmp, "Update: Add: Content");

				tmp = false;
				f.once('add', function (obj) {
					tmp = obj;
				});
				f.update(null, new Date(2013, 1, 1));
				a(tmp, o3, "Update bounds: Add: Invoked");
				tmp = {};
				tmp[o1._id] = o1; tmp[o3._id] = o3; tmp[o5._id] = o5; tmp[o6._id] = o6;
				a.deep(copy(f), tmp, "Update bounds: Add: Content");
				a(f.length, 4, "Update bounds: Add: Length");

				f.destroy()
				a.deep(ns.filters.filters.bar, [], "Filters factory content after remove");
			},
			min: function () {
				imp = cimp();
				ns = imp.create('foo', { bar: { type: 'date', filtered: true } });

				o1 = ns.create({ bar: new Date(2011, 0, 1) });
				o2 = ns.create({ bar: new Date(2001, 0, 1) });
				o3 = ns.create({ bar: new Date(2013, 0, 1) });
				o4 = ns.create({ bar: new Date(2014, 0, 1) });
				o5 = ns.create({ bar: new Date(1998, 0, 1) });

				// General filter
				f = ns.filter('bar', {
					min: now
				});
				a.deep(ns.filters.filters.bar, [f], "Filters factory content");
				tmp = {};
				tmp[o3._id] = o3; tmp[o4._id] = o4;
				a.deep(copy(f), tmp, "Content");

				tmp = false;
				f.once('add', function (obj) {
					tmp = obj;
				});
				o6 = ns.create({ bar: new Date(2020, 0, 1) });
				a(tmp, o6, "Add: Invoked");
				tmp = {};
				tmp[o3._id] = o3; tmp[o4._id] = o4; tmp[o6._id] = o6;
				a.deep(copy(f), tmp, "Add: Content");

				tmp = false;
				f.once('remove', function (obj) {
					tmp = obj;
				});
				o3._destroy();
				a(tmp, o3, "Remove: Invoked");
				tmp = {};
				tmp[o4._id] = o4; tmp[o6._id] = o6;
				a.deep(copy(f), tmp, "Remove: Content");

				tmp = false;
				f.once('remove', function (obj) {
					tmp = obj;
				});
				o6._set('bar', new Date(2001, 0, 1));
				a(tmp, o6, "Update: Remove: Invoked");
				tmp = {};
				tmp[o4._id] = o4;
				a.deep(copy(f), tmp, "Update: Remove: Content");

				tmp = false;
				f.once('add', function (obj) {
					tmp = obj;
				});
				o6._set('bar', new Date(2020, 0, 1));
				a(tmp, o6, "Update: Add: Invoked");
				tmp = {};
				tmp[o4._id] = o4; tmp[o6._id] = o6;
				a.deep(copy(f), tmp, "Update: Add: Content");

				tmp = false;
				f.once('add', function (obj) {
					tmp = obj;
				});
				f.update(new Date(2010, 11, 1));
				a(tmp, o1, "Update bounds: Add: Invoked");
				tmp = {};
				tmp[o1._id] = o1; tmp[o4._id] = o4; tmp[o6._id] = o6;
				a.deep(copy(f), tmp, "Update bounds: Add: Content");

				f.destroy()
				a.deep(ns.filters.filters.bar, [],
					"Filters factory content after remove");
			},
			"min & max": function () {
				imp = cimp();
				ns = imp.create('foo', { bar: { type: 'date', filtered: true } });

				o5 = ns.create({ bar: new Date(1998, 0, 1) });
				o2 = ns.create({ bar: new Date(2001, 0, 1) });
				o1 = ns.create({ bar: new Date(2011, 0, 1) });
				o3 = ns.create({ bar: new Date(2013, 0, 1) });
				o4 = ns.create({ bar: new Date(2014, 0, 1) });

				// General filter
				f = ns.filter('bar', {
					min: new Date(2001, 0, 1),
					max: new Date(2013, 0, 1)
				});
				a.deep(ns.filters.filters.bar, [f], "Filters factory content");
				tmp = {};
				tmp[o1._id] = o1; tmp[o2._id] = o2; tmp[o3._id] = o3;
				a.deep(copy(f), tmp, "Content");

				tmp = false;
				f.once('add', function (obj) {
					tmp = obj;
				});
				o6 = ns.create({ bar: new Date(2009, 0, 1) });
				a(tmp, o6, "Add: Invoked");
				tmp = {};
				tmp[o1._id] = o1; tmp[o2._id] = o2; tmp[o3._id] = o3;  tmp[o6._id] = o6;
				a.deep(copy(f), tmp, "Add: Content");

				tmp = false;
				f.once('remove', function (obj) {
					tmp = obj;
				});
				o2._destroy();
				a(tmp, o2, "Remove: Invoked");
				tmp = {};
				tmp[o1._id] = o1; tmp[o3._id] = o3;  tmp[o6._id] = o6;
				a.deep(copy(f), tmp, "Remove: Content");

				tmp = false;
				f.once('remove', function (obj) {
					tmp = obj;
				});
				o6._set('bar', new Date(2020, 0, 1));
				a(tmp, o6, "Update: Remove: Invoked");
				tmp = {};
				tmp[o1._id] = o1; tmp[o3._id] = o3;
				a.deep(copy(f), tmp, "Update: Remove: Content");

				tmp = false;
				f.once('add', function (obj) {
					tmp = obj;
				});
				o6._set('bar', new Date(2010, 0, 1));
				a(tmp, o6, "Update: Add: Invoked");
				tmp = {};
				tmp[o1._id] = o1; tmp[o3._id] = o3; tmp[o6._id] = o6;
				a.deep(copy(f), tmp, "Update: Add: Content");

				tmp = false;
				f.once('add', function (obj) {
					tmp = obj;
				});
				f.update(new Date(1997, 1, 1), f.max);
				a(tmp, o5, "Update bounds: Add: Invoked");
				tmp = {};
				tmp[o1._id] = o1; tmp[o3._id] = o3; tmp[o5._id]= o5; tmp[o6._id] = o6;
				a.deep(copy(f), tmp, "Update bounds: Add: Content");

				f.destroy()
				a.deep(ns.filters.filters.bar, [],
					"Filters factory content after remove");
			}
		},
		"Select index": {
			"Single": function () {
				imp = cimp();
				ns = imp.create('foo', { bar: { type: 'select', filtered: true, options: {
					raz: {}, dwa: {}, trzy: {}
				}}});

				o1 = ns.create({ bar: 'raz' });
				o2 = ns.create({ bar: 'dwa' });
				o3 = ns.create({ bar: 'raz' });
				o4 = ns.create({ bar: 'trzy' });
				o5 = ns.create({ bar: 'dwa' });

				f = ns.filter('bar', {
					select: 'raz'
				});
				a.deep(ns.filters.filters.bar, [f], "Filters factory content");
				tmp = {};
				tmp[o1._id] = o1; tmp[o3._id] = o3;
				a.deep(copy(f), tmp, "Content");
				a(f.length, 2, "Length");

				tmp = false;
				f.once('add', function (obj) {
					tmp = obj;
				});
				o6 = ns.create({ bar: 'raz' });
				a(tmp, o6, "Add: Invoked");
				tmp = {};
				tmp[o1._id] = o1; tmp[o3._id] = o3; tmp[o6._id] = o6;
				a.deep(copy(f), tmp, "Add: Content");
				a(f.length, 3, "Add: Length");

				tmp = false;
				f.once('remove', function (obj) {
					tmp = obj;
				});
				o3._destroy();
				a(tmp, o3, "Remove: Invoked");
				tmp = {};
				tmp[o1._id] = o1; tmp[o6._id] = o6;
				a.deep(copy(f), tmp, "Remove: Content");

				tmp = false;
				f.once('remove', function (obj) {
					tmp = obj;
				});
				o6._set('bar', 'dwa');
				a(tmp, o6, "Update: Remove: Invoked");
				tmp = {};
				tmp[o1._id] = o1;
				a.deep(copy(f), tmp, "Update: Remove: Content");

				tmp = false;
				f.once('add', function (obj) {
					tmp = obj;
				});
				o6._set('bar', 'raz');
				a(tmp, o6, "Update: Add: Invoked");
				tmp = {};
				tmp[o1._id] = o1; tmp[o6._id] = o6;
				a.deep(copy(f), tmp, "Update: Add: Content");

				f.update('dwa');
				tmp = {};
				tmp[o2._id] = o2; tmp[o5._id] = o5;
				a.deep(copy(f), tmp, "Update bounds: Add: Content");
				a(f.length, 2, "Update bounds: Add: Length");

				f.destroy()
				a.deep(ns.filters.filters.bar, [], "Filters factory content after remove");
			},
			"Double": function () {
				imp = cimp();
				ns = imp.create('foo', { bar: { type: 'select', filtered: true, options: {
					raz: {}, dwa: {}, trzy: {}
				}}});

				o1 = ns.create({ bar: 'raz' });
				o2 = ns.create({ bar: 'dwa' });
				o3 = ns.create({ bar: 'raz' });
				o4 = ns.create({ bar: 'trzy' });
				o5 = ns.create({ bar: 'dwa' });

				f = ns.filter('bar', {
					select: ['raz', 'trzy']
				});
				a.deep(ns.filters.filters.bar, [f], "Filters factory content");
				tmp = {};
				tmp[o1._id] = o1; tmp[o3._id] = o3; tmp[o4._id] = o4;
				a.deep(copy(f), tmp, "Content");

				tmp = false;
				f.once('add', function (obj) {
					tmp = obj;
				});
				o6 = ns.create({ bar: 'trzy' });
				a(tmp, o6, "Add: Invoked");
				tmp = {};
				tmp[o1._id] = o1; tmp[o3._id] = o3;  tmp[o4._id] = o4; tmp[o6._id] = o6;
				a.deep(copy(f), tmp, "Add: Content");

				tmp = false;
				f.once('remove', function (obj) {
					tmp = obj;
				});
				o3._destroy();
				a(tmp, o3, "Remove: Invoked");
				tmp = {};
				tmp[o1._id] = o1;  tmp[o4._id] = o4; tmp[o6._id] = o6;
				a.deep(copy(f), tmp, "Remove: Content");

				tmp = false;
				f.once('remove', function (obj) {
					tmp = obj;
				});
				o6._set('bar', 'dwa');
				a(tmp, o6, "Update: Remove: Invoked");
				tmp = {};
				tmp[o1._id] = o1;  tmp[o4._id] = o4;
				a.deep(copy(f), tmp, "Update: Remove: Content");

				tmp = false;
				f.once('add', function (obj) {
					tmp = obj;
				});
				o6._set('bar', 'trzy');
				a(tmp, o6, "Update: Add: Invoked");
				tmp = {};
				tmp[o1._id] = o1;  tmp[o4._id] = o4; tmp[o6._id] = o6;
				a.deep(copy(f), tmp, "Update: Add: Content");

				f.update('dwa');
				tmp = {};
				tmp[o2._id] = o2; tmp[o5._id] = o5;
				a.deep(copy(f), tmp, "Update bounds: Add: Content");

				f.destroy()
				a.deep(ns.filters.filters.bar, [], "Filters factory content after remove");
			}
		}
	};
};
