'use strict';

var aClone  = require('es5-ext/lib/List/clone').call
  , copy    = require('es5-ext/lib/Object/plain/clone').call
  , cimp    = require('../lib/implementation')
  , dschema = require('../lib/schema').setDynamic;

module.exports = function (t, a) {
	var imp, ns1, ns2, ns3, o1, o12, o2, o22, o3, o32, rel, rel2, list, tmp, tmp2
	  , x = {}, y = {}, z = {};

	imp = cimp();
	ns1 = imp.create('foo3', dschema({}));
	ns2 = imp.create('bar5', dschema({ foo: { type: ns1 } }));
	ns3 = imp.create('other7', dschema({ bar: { type: ns2 } }));
	o1 = ns1.create({ x: x, y: y, z: y });
	o2 = ns2.create({ foo: o1, w: y });
	o3 = ns3.create({ bar: o2, x: x });

	// check initial
	rel = o1._get(ns2);
	a(o1._get(ns2, 'foo'), rel, "Same return for named relation");
	tmp = {}; tmp[o2._id] = o2;
	a.deep(copy(rel), tmp, "Content");
	a(rel.length, 1, "Length");

	rel2 = rel.get(ns3);
	a(rel.get(ns3, 'bar'), rel2, "Deep: Same return for named relation");
	tmp = {}; tmp[o3._id] = o3;
	a.deep(copy(rel2), tmp, "Deep: Content");
	a(rel.length, 1, "Deep: Length");
	a(rel2.from, rel, "Deep: from");
	a(rel2.to, ns3, "Deep: to");
	a(rel2.name, 'bar', "Deep: name");

	// rel  = o1 -> ns2  = [o2]
	// rel2 = rel -> ns3 = [o3]

	// add
	tmp = false;
	rel.once('add', function (obj) {
		tmp = obj;
	});
	o22 = ns2.create({ foo: o1, x: x });
	a(tmp, o22, "Add: emitted");
	tmp = {}; tmp[o2._id] = o2; tmp[o22._id] = o22;
	a.deep(copy(rel), tmp, "Add: Content");
	a(rel.length, 2, "Add: Length");

	// rel  = o1 -> ns2  = [o2, o22]
	// rel2 = rel -> ns3 = [o3]

	// add deep
	tmp = false;
	rel2.once('add', function (obj) {
		tmp = obj;
	});
	o32 = ns3.create({ bar: o22, x: x, name: 'o32' });
	a(tmp, o32, "Deep: Add: emitted");
	tmp = {}; tmp[o3._id] = o3; tmp[o32._id] = o32;
	a.deep(copy(rel2), tmp, "Deep: Add: Content");
	a(rel.length, 2, "Deep: Add: Length");

	// rel  = o1 -> ns2  = [o2, o22]
	// rel2 = rel -> ns3 = [o3, o32]

	// list
	tmp = aClone(rel.list(function () {})); tmp.sort();
	tmp2 = [o2, o22]; tmp2.sort();
	a.deep(tmp, tmp2, "List");
	tmp = aClone(rel2.list(function () {})); tmp.sort();
	tmp2 = [o3, o32]; tmp2.sort();
	a.deep(tmp, tmp2, "Deep: List");

	// switch
	o12 = ns1.create({ x: x, y: y });

	tmp = false;
	rel.once('remove', function (obj) {
		tmp = obj;
	});
	tmp2 = false;
	rel2.once('remove', function (obj) {
		tmp2 = obj;
	});

	o2._set('foo', o12);
	a(tmp, o2, "Switch: emitted");
	a(tmp2, o3, "Deep: Switch: emitted");
	tmp = {}; tmp[o22._id] = o22;
	a.deep(copy(rel), tmp, "Switch: content");
	a(rel.length, 1, "Switch: Length");
	tmp = {}; tmp[o32._id] = o32;
	a.deep(copy(rel2), tmp, "Deep: Switch: content");
	a(rel2.length, 1, "Deep: Switch: Length");

	// remove to
	tmp = false;
	rel.once('remove', function (obj) {
		a(obj, o22, "Remove");
		tmp = true;
	});
	tmp2 = false;
	rel2.once('remove', function (obj) {
		a(obj, o32, "Deep: Remove");
		tmp2 = true;
	});
	o22._destroy();
	a(tmp, true, "Remove: emitted");
	a(tmp2, true, "Deep: Remove: emitted");
	a.deep(copy(rel), {}, "Remove: content");
	a(rel.length, 0, "Remove: Length");
	a.deep(copy(rel2), {}, "Deep: Remove: content");
	a(rel2.length, 0, "Deep: Remove: Length");

	o2._set('foo', o1);
	// remove from
	tmp = false;
	rel.once('destroy', function (obj) {
		tmp = {}; tmp[o2._id] = o2;
		a.deep(obj, tmp, "Destroy");
		tmp = true;
	});
	tmp2 = false;
	rel2.once('destroy', function (obj) {
		tmp2 = {}; tmp2[o3._id] = o3;
		a.deep(obj, tmp2, "Deep: Destroy");
		tmp2 = true;
	});
	o1._destroy();
	a(tmp, true, "Destroy: emitted");
	a(tmp2, true, "Deep: Destroy: emitted");
	a.deep(copy(rel), {}, "Destroy: content");
	a(rel.length, 0, "Destroy: Length");
	a.deep(copy(rel2), {}, "Deep: Destroy: content");
	a(rel2.length, 0, "Deep: Destroy: Length");
};
