'use strict';

var values   = require('es5-ext/lib/Object/plain/values').call
  , lcopy    = require('es5-ext/lib/List/clone').call
  , copy     = require('es5-ext/lib/Object/plain/clone').call
  , propSort = require('es5-ext/lib/Object/compare-by')
  , cimp     = require('../lib/implementation')
  , dschema  = require('../lib/schema').setDynamic;

module.exports = function (a) {
	var imp, ns1, ns2, o1, o2, o3, o21, x = {}, y = {}, z = {}, tmp, d1, d2
	  , id, rel, orel, orel2, l1, notype;
	imp = cimp(new Date);
	notype = { type: false };

	ns1 = imp.create('test2', dschema({}));
	a(ns1.length, 0, "Length");

	tmp = false;
	ns1.once('add', function (o) {
		tmp = o;
	});
	o1 = ns1.create({ raz: x, dwa: y, sort: 3 });
	a(tmp, o1, "Add: emitted");
	a(ns1.length, 1, "Add: Length");
	a(typeof o1._id, 'string', "Data: id is string");
	a(o1._ns, ns1, "Data: namespace");
	a.ok(o1._created instanceof Date, "Data: created is date");
	a(o1._created, o1._updated,
		"Data: created and updated are same for created objects");
	a.deep(copy(o1), { raz: x, dwa: y, sort: 3 }, "Data: content");

	o2 = ns1.create({ trzy: z, dwa: y, sort: 5 });
	a.not(o1._id, o2._id, "Object: ids differ");

	d1 = new Date(o1._created.getTime() + 1);
	d2 = new Date(d1.getTime() + 1);
	tmp = false;
	ns1.once('add', function (o) {
		tmp = o;
	});
	o3 = ns1.restore(id = imp.generateId(), d1, d2, { some: x });
	a(tmp, o3, "Restore: emitted");
	a(ns1.length, 3, "Restore: Length");
	a(o3._id, id, "Restore: id");
	a(o3._ns, ns1, "Restore: namespace");
	a(o3._created, d1, "Restore: created");
	a(o3._updated, d2, "Restore: updated");
	a.deep(copy(o3), { some: x }, "Restore: content");

	a.throws(function () {
		ns1.restore(o1._id, d2, d2, { });
	}, "Restore: Same id, different creation date");

	a(ns1.restore(o1._id, o1._created, o1._created, {}), o1, "Restore: Same");
	a.deep(copy(o1), { raz: x, dwa: y, sort: 3 }, "Restore: Same: Content");

	a(ns1.restore(o1._id, o1._created, d2, { bar: x, sort: 2 }), o1,
		"Restore: updated");
	a.deep(copy(o1), { bar: x, sort: 2 }, "Restore: Updated: Content");
	a.deep(o1._updated, d2, "Restore: Updated: Updated");

	tmp = {}; tmp[o1._id] = o1; tmp[o2._id] = o2; tmp[o3._id] = o3;
	a.deep(copy(ns1), tmp, "Namespace: content");

	tmp = false;
	ns1.once('remove', function (o) {
		a(o, o3, "Remove: listener");
		tmp = true;
	});
	o3._destroy();
	a(tmp, true, "Remove: emitted");
	tmp = {}; tmp[o1._id] = o1; tmp[o2._id] = o2;
	a.deep(copy(ns1), tmp, "Namespace: Remove: Content");
	a(ns1.length, 2, "Remove: Length");

	ns2 = imp.create('other2', dschema({ foo: { type: ns1 } }));
	rel = ns1.relations[ns2.id]['foo'];
	a(ns1.getRelation(ns2), rel, "Get: relation");
	a(ns1.getRelation(ns2, 'foo'), rel, "Get: relation with name");
	a(rel.from, ns1, "Relation: from");
	a(rel.to, ns2, "Relation: to");
	a(rel.name, 'foo', "Relation: name");
	a.deep(copy(rel), {}, "Relation: data");

	o21 = ns2.create({ trzy: 'cztery', foo: o1 });
	orel = rel.get(o1);
	tmp = {}; tmp[o21._id] = o21;
	a.deep(copy(orel),tmp, "Relation: content");
	o21._destroy();
	a.deep(copy(orel), {}, "Relation: content after remove");

	l1 = ns1.list(propSort('sort').call);
	a.deep(lcopy(l1), [o1, o2], "List content");
};
