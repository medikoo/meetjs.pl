'use strict';

var isArray  = Array.isArray
  , contains = require('es5-ext/lib/List/contains').call
  , forEach  = require('es5-ext/lib/List/for-each').call
  , endsWith = require('es5-ext/lib/String/ends-with').call

  , getControlValue, getDate, getDateTime;

getDate = function (str) {
	var match;
	if ((match = str.match(/^(\d{4})-(\d{2})-(\d{2})(?: (\d{2}):(\d{2}))?$/))) {
		return !match[4] ? new Date(Date.UTC(Number(match[1]), Number(match[2]) - 1,
			Number(match[3]))) : new Date(Number(match[1]), Number(match[2]) - 1,
				Number(match[3]), Number(match[4]) || 0, Number(match[5]) || 0, 0);
	} else {
		return str || null;
	}
};

getControlValue = function (control) {
	var match, timeControl;
	switch (control.nodeName.toLowerCase()) {
	case 'input':
		switch (control.getAttribute('type') || control.type) {
		case 'date':
			if ((match = control.name.match(/\.date(\[.+|$)/))) {
				timeControl = control.form[control.name.slice(0, -match[0].length) +
					'.time' + (match[1] || '')];
				if (!control.value && !timeControl.value) {
					return null;
				}
				return getDate(control.value.trim() + ' ' +
					(timeControl.value.trim() || '00:00'));
			}
			return control.valueAsDate || getDate(control.value);
		case 'checkbox':
			if (control.hasAttribute('value')) {
				return control.checked ? control.value : null;
			} else {
				return control.checked;
			}
		case 'radio':
			if (!control.checked) {
				return null;
			}
			if (control.value === 'true') {
				return true;
			} else if (control.value === 'false') {
				return false;
			} else {
				return control.value;
			}
		case 'number':
			return (control.value === '') ? null : Number(control.value);
		case 'file':
			return null;
		case 'submit':
		case 'image':
			if (control === lastClickTarget) {
				return true;
			}
		case 'button':
		case 'reset':
			return null;
		default:
			return control.value;
		}
	case 'button':
		switch (control.type.toLowerCase()) {
		case 'submit':
		case 'image':
			if (control === lastClickTarget) {
				return true;
			}
		default:
			return null;
		}
	case 'textarea':
		return control.value;
	case 'select':
		if (control.type == 'select-one') {
			if (control.selectedIndex >= 0) {
				return control.value || null;
			}
		} else {
			var values = [];
			for (var j = 0; j < control.length; ++j) {
				if (control.options[j].selected) {
					values.push(control.options[j].value);
				}
			}
			return values;
		}
	default:
		throw new TypeError("Unrecognized control type");
	}
};


module.exports = function (form) {
	var value, data = {}, name, tname, names;

	forEach(form.elements, function (control) {
		var scope = data;
		if ((control.type === 'submit') || (control.name.match(/\.time(\[.+|$)/) &&
			 (control.getAttribute('type') === 'time') || !control.name)) {
			return;
		}

		if ((value = getControlValue(control)) !== null) {
			name = control.name;
			if (contains(name, '[')) {
				names = name.split(/\[|\]\[|\]/);
				names.pop();
				name = names.pop();
				while ((tname = names.shift())) {
					if (endsWith(tname, '.date') &&
						 (control.getAttribute('type') === 'date')) {
						tname = tname.slice(0, -5);
					}
					scope = scope[tname] || (scope[tname] = {});
				}
			}
			if (scope[name]) {
				if (!isArray(scope[name])) {
					scope[name] = [scope[name]];
				}
				scope[name].push(value);
			} else if (endsWith(name, '.date') &&
				(control.getAttribute('type') === 'date')) {
				scope[name.slice(0, -5)] = value;
			} else {
				scope[name] = value;
			}
		}
	});
	console.log("SUBMIT", data);
	return data;
};
