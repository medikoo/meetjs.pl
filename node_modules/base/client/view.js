'use strict';

var defineProperty = Object.defineProperty
  , isError        = require('es5-ext/lib/Error/is-error')
  , peek           = require('es5-ext/lib/List/peek').call
  , domjs          = require('domjs/lib/html5')(document)
  , createView     = require('view')
  , replaceContent = require('tree/lib/ext/Node/replace-content').call
  , forceReflow    = require('./tpl/helpers/force-reflow')
  , navigator      = require('./navigator')

  , dview, rview;

module.exports = rview = createView(domjs, 'root');
dview = rview.ownerDocument;
dview.on('load', forceReflow);
dview.on('destroy', function (view, current) {
	if (current) {
		navigator.load('../');
	}
});
rview.switchView = function (root) {
	var view;
	rview['/'] = root;
	(dview.current.resolve(location.pathname) || root[':not-found:']).load();
};

navigator.on('update', function (url, search, hash) {
	var view;

	console.log('URL', url);
	if (peek(url) !== '/') {
		navigator.load(url + '/' + search + hash);
		return;
	}

	if ((view = dview.current.resolve(url))) {
		view.load();
	} else {
		rview['/'][':not-found:'].load();
	}
});

rview.displayError = (function (dom) {
	rview.clearError = function () {
		dom.style.display = 'none';
	};
	rview.clearError();
	return function (msg) {
		var p, orgmsg = msg;

		if (isError(msg)) {
			console.log(msg, msg.stack);
			if (!(msg instanceof Error)) {
				console.log((new Error).stack);
			}
			msg = msg.message;
		}
		if (typeof msg === 'string') {
			msg = msg.split('\n').map(function (msg) {
				p = document.createElement('p');
				p.appendChild(document.createTextNode(msg));
				return p;
			});
		}
		replaceContent(dom.children[0], msg);
		dom.style.display = '';
		forceReflow();
		if ((document.body.scrollTop > 120) ||
			(document.documentElement.scrollTop > 120)) {
			scroll(0, 120);
		}

		dview.once('load', rview.clearError);

		return orgmsg;
	};
}(domjs.getById('error-global-msg')));
