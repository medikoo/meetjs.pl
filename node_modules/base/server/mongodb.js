'use strict';

var mongodb  = require('mongodb/lib/mongodb')
  , copy     = require('es5-ext/lib/Object/plain/clone').call
  , isString = require('es5-ext/lib/String/is-string')
  , contains = require('es5-ext/lib/String/contains').call
  , a2p      = require('deferred/lib/async-to-promise').call
  , config   = require('../../../config').DB

  , Db = mongodb.Db, Server = mongodb.Server

  , db, collection, nsMap, waste, checkAuthError;

if (!config) {
	throw new Error("DB config not found in config.js");
}

require('deferred/lib/ext/invoke');
require('deferred/lib/ext/invoke-async');

exports.nsMap = nsMap = {
	a:   'auth',
	ad:  'admin',
	at:  'attachment',
	d:   'doctor',
	p:   'patient',
	pa:  'padd',
	v:   'visit',
	vf:  'visitfile',
	t:   'test',
	tf:  'testfile',
	di:  'diagnosis',
	tr:  'treatment',
	trc: 'treatmentCycle'
};

db = new Db(config.name, new Server(config.host, config.port, {}));
db = a2p(db.open.bind(db))(function (db) {
	return config.user ?
		a2p(db.authenticate.bind(db, config.user, config.password))(db) : db;
}).end();

checkAuthError = function (data) {
	if (isString(data) && contains(data, 'unauthorized')) {
		throw new Error("Unauthorized db connection");
	}
};

exports.close = db.invoke.bind(db, 'close');

collection = exports.collection = (function () {
	var cache = {};
	return function (name) {
		return cache[name] || (cache[name] = db.invokeAsync('collection', name));
	};
})();

waste = collection('_waste');

exports.waste = function () {
	return waste.invokeAsync('find', {})
	(function self (cursor) {
		return {
			next: function () {
				return a2p(cursor.nextObject.bind(cursor))
				(function (data) {
					if (!data) {
						return null;
					} else {
						return data;
					}
				});
			}
		};
	});
};

exports.save = function (obj) {
	var col, data;
	col = collection(nsMap[obj._ns.id]);
	if (!obj._destroyed) {
		data = obj._copy();
		data._created = String(obj._created.getTime());
		data._updated = String(obj._updated.getTime());
		data._id = obj._id;
		return col.invokeAsync('update', { _id: obj._id }, data,
			{ upsert: true, safe: true })
		(waste.invokeAsync('remove', { _id: obj._id }))(obj);
	} else {
		return col.invokeAsync('remove', { _id: obj._id })
		(waste.invokeAsync('update', { _id: obj._id },
			{ _id: obj._id, _updated: obj._updated.getTime(),
				_created: obj._created.getTime(), ns: obj._ns.id },
			{ upsert: true, safe: true }))(obj);
	}
};

exports.findById = function (ns, id) {
	var col, obj;
	return collection(nsMap[ns.id]).invokeAsync('findOne', { _id: String(id) })
	(function (data) {
		if (data) {
			checkAuthError(data);
			obj = {
				id: id,
				created: new Date(Number(data._created)),
				updated: new Date(Number(data._updated)),
				data: data
			};
			delete data._created;
			delete data._updated;
			delete data._id;
			return obj;
		} else {
			return null;
		}
	});
};

exports.findOneByQuery = function (ns, query, options) {
	var obj;
	return collection(nsMap[ns.id]).invokeAsync('findOne', query || {})
	(function (data) {
		if (data) {
			checkAuthError(data);
			obj = {
				id: data._id,
				created: new Date(Number(data._created)),
				updated: new Date(Number(data._updated)),
				data: data
			};
			delete data._created;
			delete data._updated;
			delete data._id;
			return obj;
		} else {
			return null;
		}
	});
};

exports.findAllByQuery = function (ns, query, options) {
	var col, obj;
	return collection(nsMap[ns.id]).invokeAsync('find', query || {}, options || {})
	(function self (cursor) {
		return {
			next: function () {
				return a2p(cursor.nextObject.bind(cursor))
				(function (data) {
					checkAuthError(data);
					var obj;
					if (!data) {
						return null;
					}
					obj = {
						id: data._id,
						created: new Date(Number(data._created)),
						updated: new Date(Number(data._updated)),
						data: data
					};
					delete data._created;
					delete data._updated;
					delete data._id;
					return obj;
				});
			}
		};
	});
};

exports.listener = function (obj) {
	console.log(obj._destroyed ? 'REMOVE' : 'SAVE', obj._ns.id + ':' + obj._id);
	exports.save(obj);
};
