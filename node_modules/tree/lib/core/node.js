'use strict';

var remove = require('es5-ext/lib/Array/remove').call
  , peek   = require('es5-ext/lib/List/peek').call;

module.exports = function (expose) {
	return Object.defineProperties({}, {
		parentNode:    { value: null, enumerable: expose },
		ownerDocument: { value: null, enumerable: expose },
		childNodes:    { value: null, enumerable: expose },
		firstChild:    { value: null, enumerable: expose },
		lastChild:     { value: null, enumerable: expose },
		insertBefore: { value: function (newChild, refChild) {
			var index;
			if (this === newChild) {
				throw new Error("Cannot append node to itself");
			}
			if (this.ownerDocument !== newChild.ownerDocument) {
				throw new Error("Cannot append node from different document");
			}
			if (refChild && (refChild.parentNode !== this)) {
				throw new Error("Reference child is not child of this node");
			}
			if (newChild.parentNode) {
				newChild.parentNode.removeChild(newChild);
			}
			index = refChild ? this.childNodes.indexOf(refChild) :
				this.childNodes.length;
			this.childNodes.splice(index, 0, newChild);
			if (this.childNodes[0] === newChild) {
				Object.defineProperty(this, 'firstChild', {
					value: newChild, configurable: true, enumerable: expose });
			}
			if (peek(this.childNodes) === newChild) {
				Object.defineProperty(this, 'lastChild', {
					value: newChild, configurable: true, enumerable: expose });
			}
			return Object.defineProperty(newChild, 'parentNode', {
				value: this, enumerable: expose, configurable: true });
		}, enumerable: expose },
		appendChild: { value: function (newChild) {
			return this.insertBefore(newChild, null);
		}, enumerable: expose },
		removeChild: { value: function (oldChild) {
			if (this !== oldChild.parentNode) {
				throw new Error("Cannot remove child from not its parent");
			}
			remove(this.childNodes, oldChild);
			if (!this.childNodes.length || (oldChild === this.firstChild)) {
				Object.defineProperty(this, 'firstChild', {
					value: this.childNodes[0] || null, configurable: true,
					enumerable: expose
				});
			}
			if (!this.childNodes.length || (oldChild === this.lastChild)) {
				Object.defineProperty(this, 'lastChild', {
					value: peek(this.childNodes) || null, configurable: true,
					enumerable: expose });
			}
			return Object.defineProperty(oldChild, 'parentNode', {
				value: null, enumerable: expose, configurable: true });
		}, enumerable: expose }
	});
};